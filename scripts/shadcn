#!/bin/env bash
: "
A handy script for dynamically importing components from ShadCN
in both Next.js and Remix applications
"

function shadcn_importer(){
  # Ensures at leas two args are passed.
  [ "$#" -lt 2 ] &&
    echo >&2 "At least two args are required." &&
    exit 1

  # Ensures pnpm is installed.
  ! [ -x "$(command -v pnpm)" ] &&
    echo >&2 "pnpm binary was not found." &&
    exit 1

  # Ensures fd is installed.
  ! [ -x "$(command -v fd)" ] &&
    echo >&2 "fd binary was not found." &&
    exit 1

  # Ensures ripgrep is installed.
  ! [ -x "$(command -v rg)" ] &&
    echo >&2 "ripgrep binary was not found." &&
    exit 1

  # Ensures root path exists.
  [ -z "$ROOT" ] &&
    echo >&2 "Failed to get root directory." &&
    exit 1


  package_json="$ROOT/package.json"

  ! [ -f "$package_json" ] &&
    echo >&2 "File package.json was not found." &&
    exit 1

  # Set components address based on whether Remix is present in
  # package.json
  if rg -q "remix" "$package_json"; then
      components_address="$ROOT/app/components/ui"
  else
      components_address="$ROOT/components/ui"
  fi


  # Run the specified command using pnpx shadcn@latest
  pnpx shadcn@latest "$@" || {
      echo >&2 "Failed to run shadcn@latest." &&
      exit 1
  }

  cd "$components_address" || {
      echo >&2 "Failed to change to directory $components_address." &&
      exit 1
  }

  index_address="$components_address/index.ts"

  # Automatically appends each new component to index.ts upon addition.
  content=$(fd .tsx --exec echo 'export * from "{}";' | sed 's/.tsx//g')
  echo "$content" > "$index_address"

}


case "$1" in
  add)  shadcn_importer "$@";;
  *  )  pnpx shadcn@latest "$@"
esac
