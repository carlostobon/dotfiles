#!/bin/bash

# General shortcuts
alias \
	cp="cp -iv" \
	mv="mv -iv" \
	rmd="sudo rm -r" \
	ls="exa" \
	l="exa" \
	lb="lsblk" \
	cl="clear" \
	t="touch" \
	a="c .." \
  z="zathura" \
	g="git" \
	gk="gpg --list-keys --keyid-format long" \
  kt="v ~/.config/kitty/theme.conf" \
  xm="v ~/.xmonad/xmonad.hs" \
	bh="v ~/.bash_history" \
  dc="c ~/Documents" \
  dw="c ~/Downloads" \
	dt="c ~/.dotfiles" \
	dv="c ~/.dotfiles/vim && v shortcuts.vim" \
  nf="neofetch" \
	ts="ts-node" \
	st="sudo systemctl" \
	clean="p -Qtdp; p -Scc; sudo rm -rf .cache" \
	empty="sudo rm ~/.cache" \
	sdn="sudo shutdown now" \
	rb="sudo reboot" \
	ka="killall" \
	y="yazi" \
	see="ncdu"\
	v="vim" \
	tree="lsd --tree --depth 2" \
	vc="vim ~/.vimrc" \
	vp="vim page.tsx" \
	ga="git add" \
	gc="git commit -m" \
	gl="git log --stat" \
	gps="git push" \
	gpu="git pull" \
	gb="git branch" \
	gs="git status" \
	gsw="git switch -c" \
	gm="git merge" \
	gr="git remote" \
	gd="git diff" \
	xmr="xmonad --restart" \
	pnpx="pnpm dlx" \
	p="paru"



# Changes directory & sets $ROOT
c(){

	if ! [ -x "$(command -v fd)" ]; then
		echo >&2 "Error: fd is not installed."
		return 1
	fi

	# Checks if $1 is empty or not provided
	if [ -z "$1" ]; then
		cd "$HOME" && export ROOT="$HOME"
		return 0
	fi

	# Checks if $1 exists,
	# key for other commands that use it
	if [ -e "$1" ]; then
		cd "$1" || return 1
	else
		echo "cd $1: No such file or directory" >&2
		return 1
	fi

	current_dir=$(pwd)

	# Checks if current dir includes HOME
	if [[ "$current_dir" != "$HOME"* ]]; then
		export ROOT="$current_dir"
		return 0
	fi

	current_dir_holder="$current_dir"

	while [[ "$current_dir_holder" != "$HOME" ]]
	do
		# Try to finds .git in path current_dir
		result=$(fd \
				--hidden \
				--type d \
				--max-depth 1 \
				--glob .git \
				"$current_dir_holder")

		if [ -z "$result" ]; then
			current_dir_holder="${current_dir_holder%/*}"
		else
			export ROOT="$current_dir_holder"
			return 0
		fi

	done


	export ROOT="$current_dir"
	return 0

}

b(){
	c "$ROOT"
}

mkd(){
	mkdir -p "$1" && c "$1"
}

k(){
	c "$OLDPWD"
}

# Python terminal shortcuts
alias \
	pye="source ~/Documents/venvs/maths/bin/activate" \

# Rust terminal shortcuts
alias \
	cb="cargo build --release" \
	cr="cargo run --" \
	ca="cargo add" \
	cw="cargo watch -x check -x test -x run" \

ct(){
	c "$ROOT/target/release"
}

# Docker terminal shortcuts
alias \
	dk="sudo docker" \
	dkc="sudo docker ps -a" \
	dkei="sudo docker exec -it" \
	dki="sudo docker images" \
	dcc="sudo docker-compose" \
	rdcc="sudo docker-compose up --build -d" \
	dre="sudo docker system prune -a" \
	dvp="sudo docker volume prune" \


dri(){
	instances=$(docker image ls -q)
	dk rmi "${instances}"
}

drc(){
	instance=$(docker ps -a -q &)
	dk stop "${instance}"
	dk rm "${instance}"
}

# NextJS terminal shortcuts
alias \
	dev="pnpm run dev" \
	build="pnpm run build" \

co(){
	c "$ROOT/components" >/dev/null 2>&1 || \
	c "$ROOT/src/components" >/dev/null 2>&1 || \
	c "$ROOT/app/components" >/dev/null 2>&1 || \
	echo "Error while cd components | src/components | app/components."
}

li(){
	c "$ROOT/lib" >/dev/null 2>&1 || \
	c "$ROOT/src/lib" >/dev/null 2>&1 || \
	c "$ROOT/app/lib" >/dev/null 2>&1 || \
	echo "Error while cd lib | src/lib | app/lib."
}

s() {
    c "$ROOT/src" >/dev/null 2>&1 || \
    c "$ROOT/app" >/dev/null 2>&1 || \
    exa || \
    echo "Error while cd src | app."
}

# Video editing shortcuts
convert(){
	target=$1
	output=$2
	ffmpeg -i "${target}" -c:v copy -c:a aac "${output}.mp4"
}

mixer(){
	video=$1
	sound=$2
	name=$3
	ffmpeg -i "${video}" -i "${sound}" -c:v copy -c:a copy "${name}.mp4"
}

# Device mount and unmount
mt(){
	target=$1
	sudo mount "/dev/${target}" /mnt/simple
	c /mnt/simple
}

um(){
	sync && sudo umount /mnt/simple
}

# Compress and decompress archives
tarit(){
	if ! [ -x "$(command -v tar)" ]; then
		echo >&2 "Error: tar is not installed."
		return 1
	fi

	if ! [ -x "$(command -v pigz)" ]; then
		echo >&2 "Error: pigz is not installed."
		return 1
	fi

	name="$1"
	optional="$2"

	if [ -z "$optional" ]; then
		tar -cf - "$name" | pigz > "$name.tar.gz"
	else
	  tar -cf - "$name" | pigz > "$optional.tar.gz"
	fi
}


untarit(){
	if ! [ -x "$(command -v tar)" ]; then
		echo >&2 "Error: tar is not installed."
		return 1
	fi

	if ! [ -x "$(command -v pigz)" ]; then
		echo >&2 "Error: pigz is not installed."
		return 1
	fi


	target=$1
	sudo tar -I pigz -xf "$target"
}

# Lists files using Duer
# TODO: This feature should be integrated directly into Duer
kduer(){
	for file in *; do echo "$file" "$(duer "$file")"; done
}

# Opens the file with Vim if the target exists
vm(){
	targets=("src/main.rs" "main.py")

	for target in "${targets[@]}"; do
		if [ -e "$target" ]; then
			vim "$target"
			return 0
		fi
	done

	echo "Neither src/main.rs nor main.py found." >&2
}


vl(){
	targets=("src/lib.rs" "layout.tsx")

	for target in "${targets[@]}"; do
		if [ -e "$target" ]; then
			vim "$target"
			return 0
		fi
	done

	echo "Neither src/lib.rs nor layout.tsx found." >&2
}
