#!/bin/bash

# General shortcuts
alias \
	cp="cp -iv" \
	mv="mv -iv" \
	rmd="sudo rm -r" \
	ls="exa" \
	l="exa" \
	lb="lsblk" \
	cl="clear" \
	t="touch" \
	a="c .." \
  z="zathura" \
	g="git" \
	gk="gpg --list-keys --keyid-format long" \
  kt="v ~/.config/kitty/theme.conf" \
  xm="v ~/.xmonad/xmonad.hs" \
	bh="v ~/.bash_history" \
  dc="c ~/Documents" \
  dw="c ~/Downloads" \
	dt="c ~/.dotfiles" \
	ds="c ~/.dotfiles/vim && v settings.vim" \
  nf="neofetch" \
	ts="ts-node" \
	st="sudo systemctl" \
	clean="p -Qtdp; p -Scc; sudo rm -rf .cache" \
	empty="sudo rm ~/.cache" \
	sdn="sudo shutdown now" \
	rb="sudo reboot" \
	ka="killall" \
	y="yazi" \
	see="ncdu"\
	v="vim" \
	tree="lsd --tree --depth 2" \
	vc="vim ~/.vimrc" \
	vp="vim page.tsx" \
	vi="vim _index.tsx" \
	ga="git add" \
	gc="git commit -m" \
	gl="git log --stat" \
	gh="git push" \
	gp="git pull" \
	gb="git branch" \
	gs="git status" \
	gw="git switch -c" \
	gm="git merge" \
	gr="git restore" \
	gt="git remote" \
	gd="git diff" \
	xmr="xmonad --restart" \
	p="paru" \
	podman="sudo podman" \
	b="c \$ROOT" \
	k="c \$OLDPWD" \


# Changes the directory and sets the ROOT variable.
c(){

	# In case argument is not provided
	[ -z "$1" ] &&
		{ cd "$HOME" && export ROOT="$HOME" && return 0; }

	# Checks if 'fd' command is available and can
	# be executed
	command -v fd >/dev/null 2>&1 || {
			echo >&2 "Error: fd is not installed."
			return 1
	}

	# Checks if the argument exists and is a directory.
	# If successful, changes to the directory; otherwise,
	# return an error.
	[ -d "$1" ] || {
		echo "Error: '$1' is not a valid directory." >&2
		return 1
	}

	cd "$1" || {
		echo "Error: Failed to change directory to $1." >&2
		return 1
	}

	# If the directory is not a subdirectory of HOME,
	# set ROOT as PWD and return early, since the
	# subsequent logic relies on HOME subdirectories.
	[[ "$PWD" != "$HOME"* ]] &&
		export ROOT="$PWD" && return 0

	# This variable will be mutated on each iteration
	# of the while loop.
	holder="$PWD"


	# List with all possible required targets.
	target_entries=(".git" "package.json" "Cargo.toml" "main.py")
	while [[ "$holder" != "$HOME" ]]
	do
		# Attempt to find any target entry in the current
		# directory.
		for entry in "${target_entries[@]}"
		do
			result=$(fd --hidden --max-depth 1 --glob "$entry" "$holder")

			# When a target entry is found
			[ -n "$result" ] &&
				export ROOT="$holder" &&
				return 0
		done

		# If not found, $result has a non-zero length.
		# One level will be removed in reverse until the
		# while loop completes.
		[ -z "$result" ] && holder="${holder%/*}"

	done

# If not target entry found in the current directory or any
# parent directories, set ROOT to PWD.
export ROOT="$PWD"

}

mkd(){
	mkdir -p "$1" && c "$1"
}

# Rust terminal shortcuts
alias \
	cb="cargo build --release" \
	cr="cargo run --" \
	ca="cargo add" \
	cw="cargo watch -x check -x test -x run" \
	ct="c \$ROOT/target/release" \

# pnpm terminal shortcuts
alias \
	dev="pnpm run dev" \
	build="pnpm run build" \
	start="pnpm run start" \

co(){
	c "$ROOT/components" >/dev/null 2>&1 || \
	c "$ROOT/src/components" >/dev/null 2>&1 || \
	c "$ROOT/app/components" >/dev/null 2>&1 || \
	{
		echo "Error while changing to components directory." >&2
		return 1
	}
}

li(){
	c "$ROOT/lib" >/dev/null 2>&1 || \
	c "$ROOT/src/lib" >/dev/null 2>&1 || \
	c "$ROOT/app/lib" >/dev/null 2>&1 || \
	{
		echo "Error while changing to library directory." >&2
		return 1
	}
}

s() {
	c "$ROOT/src" >/dev/null 2>&1 || \
	c "$ROOT/app" >/dev/null 2>&1 || \
	exa
}

ro() {
	c "$ROOT/app/routes" >/dev/null 2>&1 || \
	{
		echo "Error while changing to routes directory." >&2
		return 1
	}
}

pk() {
	{ [ -e "$ROOT/package.json" ] &&
		v "$ROOT/package.json"; } ||
	{
		echo "Failed to find package.json file." >&2
		return 1
	}
}

# Video editing shortcuts
convert(){
	target=$1
	output=$2
	ffmpeg -i "${target}" -c:v copy -c:a aac "${output}.mp4"
}

mixer(){
	video=$1
	sound=$2
	name=$3
	ffmpeg -i "${video}" -i "${sound}" -c:v copy -c:a copy "${name}.mp4"
}

# Device mount and unmount
mt(){
	target=$1
	sudo mount "/dev/${target}" /mnt/simple
	c /mnt/simple
}

um(){
	sync && sudo umount /mnt/simple
}

# Compress and decompress archives
tarit(){
	if ! [ -x "$(command -v tar)" ]; then
		echo "Error: tar is not installed." >&2
		return 1
	fi

	if ! [ -x "$(command -v pigz)" ]; then
		echo "Error: pigz is not installed." >&2
		return 1
	fi

	name="$1"
	optional="$2"

	if [ -z "$optional" ]; then
		tar -cf - "$name" | pigz > "$name.tar.gz"
	else
	  tar -cf - "$name" | pigz > "$optional.tar.gz"
	fi
}


untarit(){
	{ [ -n "$1" ] && [ -e "$1" ]; } || {
		echo "Target is either not provided or does not exist." >&2
		return 1
	}


	# Check if the 'tar' command is available
	command -v tar >/dev/null 2>&1 || {
			echo "Error: tar is not installed." >&2
			return 1
	}

	# Check if the 'pigz' command is available
	command -v pigz >/dev/null 2>&1 || {
			echo "Error: pigz is not installed." >&2
			return 1
	}

	tar -I pigz -xf "$1"
}

# Lists files using Duer
# TODO: This feature should be integrated directly into Duer
kduer(){
	for file in *; do echo "$file" "$(duer "$file")"; done
}

# Opens the file with Vim if the target exists
vm(){
	targets=("src/main.rs" "main.rs" "main.py")

	for target in "${targets[@]}"; do
		[ -e "$target" ] && vim "$target" && return 0
	done

	echo "Neither src/main.rs, main.rs, nor main.py were found." >&2
	return 1
}
