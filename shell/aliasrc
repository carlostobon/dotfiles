#!/bin/sh

# General shortcuts
alias \
	cp="cp -iv" \
	mv="mv -iv" \
	rmd="sudo rm -r" \
	ls="exa" \
	l="exa" \
	lb="lsblk" \
	cl="clear" \
	t="touch" \
	a="c .." \
	k="c -" \
  z="zathura" \
	g="git" \
	gk="gpg --list-keys --keyid-format long" \
  kt="v ~/.config/kitty/theme.conf" \
  xm="v ~/.xmonad/xmonad.hs" \
	bh="v ~/.bash_history" \
  dc="c ~/Documents" \
  dw="c ~/Downloads" \
	dt="c ~/.dotfiles" \
	dv="c ~/.dotfiles/vim && v shortcuts.vim" \
  nf="neofetch" \
	ts="ts-node" \
	st="sudo systemctl" \
	clean="p -Qtdp; p -Scc; sudo rm -rf .cache" \
	empty="sudo rm ~/.cache" \
	sdn="sudo shutdown now" \
	rb="sudo reboot" \
	ka="killall" \
	y="yazi" \
	see="ncdu"\
	v="vim" \
	tree="lsd --tree --depth 2" \
	vc="vim ~/.vimrc" \
	vp="vim page.tsx" \
	ga="git add" \
	gc="git commit -m" \
	gl="git log --stat" \
	gps="git push" \
	gpu="git pull" \
	gb="git branch" \
	gs="git status" \
	gsw="git switch -c" \
	gm="git merge" \
	gr="git remote" \
	gd="git diff" \
	xmr="xmonad --restart" \
	pnpx="pnpm dlx" \
	p="paru"


base(){
	pwd | cut -d'/' -f1-4
}

c(){
	cd "$1" && export FOLDER=$(base)
}

b(){
	c $(base)
}

mkd(){
	mkdir -p "$1"
	c "$1"
}

# Python terminal shortcuts
alias \
	pye="source ~/Documents/venvs/maths/bin/activate" \

# Rust terminal shortcuts
alias \
	cr="cargo build --release" \
	ca="cargo add" \

ta(){
	c "$(base)/target/release"
}

# Docker terminal shortcuts
alias \
	dk="sudo docker" \
	dkc="sudo docker ps -a" \
	dkei="sudo docker exec -it" \
	dki="sudo docker images" \
	dcc="sudo docker-compose" \
	rdcc="sudo docker-compose up --build -d" \
	dre="sudo docker system prune -a" \
	dvp="sudo docker volume prune" \


dri(){
	instances=$(docker image ls -q)
	dk rmi ${instances}
}

drc(){
	instance=$(docker ps -a -q &)
	dk stop ${instance}
	dk rm ${instance}
}

# NextJS terminal shortcuts
alias \
	dev="pnpm run dev" \
	build="pnpm run build" \

co(){
	c "$(base)/components" > /dev/null 2>&1 || \
	c "$(base)/src/components" > /dev/null 2>&1 || \
	c "$(base)/app/components" > /dev/null 2>&1 || \
	echo "Error when cd to src/components | app/components."
}

li(){
	c "$(base)/lib" > /dev/null 2>&1 || \
	c "$(base)/src/lib" > /dev/null 2>&1 || \
	c "$(base)/app/lib" > /dev/null 2>&1 || \
	echo "Error when cd to src/lib | app/lib."
}

s(){
	c "$(base)/src" > /dev/null 2>&1 || \
	c "$(base)/app" > /dev/null 2>&1 || \
	exa || \
	echo "Error when cd to src | app."
}

# Video editing shortcuts
convert(){
	target=$1
	output=$2
	ffmpeg -i ${target} -c:v copy -c:a aac ${output}.mp4
}

mixer(){
	video=$1
	sound=$2
	name=$3
	ffmpeg -i ${video} -i ${sound} -c:v copy -c:a copy ${name}.mp4
}

# Device mount and unmount
mt(){
	target=$1
	sudo mount /dev/${target} /mnt/simple
	c /mnt/simple
}

um(){
	sync
	sudo umount /mnt/simple
}

# Compress and decompress archives
tarit(){
	name=$1
	optional=$2
	if [ -z "$optional" ]; then
		sudo tar -cf - "$name" | pigz > "$name.tar.gz"
	else
		sudo tar -cf - "$name" | pigz > "$optional.tar.gz"
	fi
}

untarit(){
	target=$1
	sudo tar -I pigz -xf "$target"
}

# Lists files using Duer
# TODO: This feature should be integrated directly into Duer
kduer(){
	for file in *; do echo "$file" $(duer "$file"); done
}

# Opens the file with Vim if the target exists
vm(){
	targets=("src/main.rs" "main.py")

	for target in "${targets[@]}"; do
		if [ -e "$target" ]; then
			vim "$target"
		fi
	done

	echo "Neither src/main.rs nor main.py found." >&2
}


vl(){
	targets=("src/lib.rs" "layout.tsx")

	for target in "${targets[@]}"; do
		if [ -e "$target" ]; then
			vim "$target"
		fi
	done

	echo "Neither src/lib.rs nor layout.tsx found." >&2
}
