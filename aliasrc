#!/bin/sh

source ".scripts/qwik"

co(){
	base=$(pwd | cut -d'/' -f1-4)
	cd "$base/app/components">/dev/null 2>&1
	if [ $? -ne 0 ]; then
		cd "$base/src/components"
	fi
}

b(){
	cd $(pwd | cut -d'/' -f1-4)
}

ro(){
	base=$(pwd | cut -d'/' -f1-4)
	cd "$base/src/routes"
}

li(){
	base=$(pwd | cut -d'/' -f1-4)
	cd "$base/app/lib">/dev/null 2>&1
	if [ $? -ne 0 ]; then
		cd "$base/src/lib"
	fi
}

s(){
	base=$(pwd | cut -d'/' -f1-4)
	cd "$base/app">/dev/null 2>&1
	if [ $? -ne 0 ]; then
		cd "$base/src"
	fi
}

bk(){
	base=$(pwd | cut -d'/' -f1-4)
	cd "$base/backend/src"
}


alias \
	cp="cp -iv" \
  z="zathura" \
	gt="git" \
	mv="mv -iv" \
	rm="sudo rm -vI" \
	rmd="sudo rm -r" \
	ls="exa" \
  kt="v ~/.config/kitty/theme.conf" \
  xm="v ~/.xmonad/xmonad.hs" \
	bh="v ~/.bash_history" \
  doc="cd ~/Documents" \
  dow="cd ~/Downloads" \
  nf="neofetch" \
	xeon="ssh carlos@192.168.58.118 -p 22" \
	ts="ts-node" \
	empty="sudo rm ~/.cache/vim/swap/*" \
	clean="p -Qtdp; p -Scc; sudo rm -rf .cache" \
	p="sudo pacman" \
	sdn="sudo shutdown now" \
	ka="killall" \
	update="sudo pacman -Syu --noconfirm" \
	server="ssh root@104.156.231.83" \
	r="ranger" \
	see="ncdu"\
	cl="clear" \
	v="vim" \
	tree="lsd --tree"\
	docker="sudo docker" \
	d="docker" \
	dc="docker ps -a" \
	di="docker images" \
	dcc="docker-compose" \
	rdcc="dcc up --build -d" \
	dre="docker system prune -a" \
	dvp="docker volume prune" \
	a="cd .." \
	vm="vim main.rs" \
	vl="vim lib.rs" \
	vi="vim index.tsx" \
	vp="vim ./+page.svelte" \
	t="touch" \
	cr="cargo build --release" \
	ca="cargo add" \
	pye="source ~/Documents/mathematics/bin/activate" \


alias \
	dev="pnpm run dev --host" \
	build="pnpm run build" \
	qwik="pnpm run qwik" \


dri(){
	instance=$(docker image ls -q)
	docker rmi $instance
}

drc(){
	instance=$(docker ps -a -q &)
	docker stop $instance
	docker rm $instance
}

mkd(){
	directory=$1
	mkdir -p $directory
	cd $directory
}

getter(){
	file=$1
	$(rsync -avz root@104.156.231.83:/var/www/server/server/$file .)
}

sender(){
	file=$1
	name=$2
	$(rsync -urvP $file root@104.156.231.83:/var/www/server/server/$name)
}

convert(){
	target=$1
	output=$2
	$(ffmpeg -i $target -vf yadif -codec:v libx264 -crf 1 -bf 2 -flags +cgop -pix_fmt yuv420p -codec:a aac -strict -2 -b:a 384k -r:a 48000 $output.mp4)
}

mixer(){
	video=$1
	sound=$2
	name=$3
	$(ffmpeg -i $video -i $sound -c:v copy -c:a copy $name.mkv)
}

# Used for fzf in vim
#
base(){
	base=$(pwd | cut -d'/' -f1-4)
	export FOLDER=$base
}

c(){
  path=$1
  cd $path
  base
}

# Used in rust
# to move directly after compiled
ta(){
	base=$(pwd | cut -d'/' -f1-4)
	cd "$base/target/release"
}



# =============================
# Shortcuts for QwikJS
# =============================
#
mkdqc(){
	directory=$1
	mkdir $directory
	cd $directory
	touch "${directory}.tsx"
	touch "${directory}.css"
	echo "import { component$, useStylesScoped$ } from '@builder.io/qwik';
import styles from './${directory}.css?inline';

export default component\$(() => {
	useStylesScoped\$(styles);

	return (
		<>
		</>
		)
	}
) " > "${directory}.tsx"
}

mkdqr(){
	directory=$1
	mkdir $directory
	cd $directory
	touch "index.tsx"
	touch "index.css"
	echo "import { component$, useStylesScoped$ } from '@builder.io/qwik';
import styles from './index.css?inline';

export default component\$(() => {
	useStylesScoped\$(styles);

	return (
		<>
		</>
		)
	}
) " > "index.tsx"
}
